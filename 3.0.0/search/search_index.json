{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to dropwizard-orient-server \u00b6 Embedded OrientDB server for Dropwizard . Release notes - Support - License Simplifies development environment (no need to maintain separate server) without sacrificing functionality (embedded server is 100% the same as usual server). Also, simplifies production deployment and allows to slightly reduce memory consumption on server due to single (shared) vm. To switch application to external server simply switch off embedded server in configuration. Embedding is officially proposed Note Orient 3.0 docs show the following code snippet which could be confusing: OrientDB orientDB = new OrientDB ( \"embedded:/tmp/\" , OrientDBConfig . defaultConfig ()); This is not the same as starting embedded server ! The code above only allows using orient databases within application, but not running studio, starting rest api, enabling plugins etc. Main features \u00b6 For orient 3.0 and dropwizard 2.0.0 Embedded orient server , managed by dropwizard (using Managed object ) Configuration in main yaml configuration file or with external orient xml configuration file Console command (interactive mode, command execution, commands file execution) Optional embedded orient studio Full support of orient plugins (and enterprise edition ) SSL configuration helpers","title":"Home"},{"location":"#welcome-to-dropwizard-orient-server","text":"Embedded OrientDB server for Dropwizard . Release notes - Support - License Simplifies development environment (no need to maintain separate server) without sacrificing functionality (embedded server is 100% the same as usual server). Also, simplifies production deployment and allows to slightly reduce memory consumption on server due to single (shared) vm. To switch application to external server simply switch off embedded server in configuration. Embedding is officially proposed Note Orient 3.0 docs show the following code snippet which could be confusing: OrientDB orientDB = new OrientDB ( \"embedded:/tmp/\" , OrientDBConfig . defaultConfig ()); This is not the same as starting embedded server ! The code above only allows using orient databases within application, but not running studio, starting rest api, enabling plugins etc.","title":"Welcome to dropwizard-orient-server"},{"location":"#main-features","text":"For orient 3.0 and dropwizard 2.0.0 Embedded orient server , managed by dropwizard (using Managed object ) Configuration in main yaml configuration file or with external orient xml configuration file Console command (interactive mode, command execution, commands file execution) Optional embedded orient studio Full support of orient plugins (and enterprise edition ) SSL configuration helpers","title":"Main features"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Releases are published to bintray jcenter (package appear immediately after release) and then to maven central (require few days after release to be published). Maven: <dependency> <groupId> ru.vyarus </groupId> <artifactId> dropwizard-orient-server </artifactId> <version> 3.0.0 </version> </dependency> Gradle: compile 'ru.vyarus:dropwizard-orient-server:3.0.0' Version works with orient 3.0 and dropwizard 2.0.0. For other versions see compatibility matrix . Usage \u00b6 Configuration class must contain OrientServerConfiguration : public class MyConfiguration extends Configuration { @NotNull @Valid private OrientServerConfiguration orientServer ; @Override public OrientServerConfiguration getOrientServer () { return orientServer ; } @JsonProperty ( \"orient-server\" ) public void setOrientServer ( OrientServerConfiguration orientServer ) { this . orientServer = orientServer ; } } Note It's not required to have not null orient configuration. If OrientServerConfiguration is null orient server will simply not start. Register orient bundle in application class: @Override public void initialize ( final Bootstrap < MyConfiguration > bootstrap ) { bootstrap . addBundle ( new OrientServerBundle < MyConfiguration >( MyConfiguration :: getOrientServer )); } Configuration \u00b6 You can start with the default configuration . Read more about configuration . Plugins \u00b6 You can also enable orient plugins : studio lucene etl graph server Note Plugins could be loaded dynamically or statically . You may also need plugins from enterprise edition in order to use query profiler. Client initialization \u00b6 Server lifecycle is managed using a Managed object, so the embedded server will start only together with jetty ( server command). Managed instances are started after all bundles run methods and even after application run method, so server will be unreachable if you try to access it from these methods. Connecting using plocal \u00b6 The most efficient way to connect to the embedded database is using plocal . This engine writes to the file system to store data. There is a LOG of changes to restore the storage in case of a crash. plocal doesn't require a started server and it's faster than remote connection. With an embedded server you would be able to use studio (remote connection) together with your application using plocal (win-win). Server stores database files in ${files-path}/databases folder, so plocal connection for server managed database would be: plocal:${files-path}/databases/dbname where ${files-path} should be replaced with path from server configuration and dbname is database name. Using new (3.0) api : OrientDB orientDB = new OrientDB ( \"embedded:${files-path}/databases\" , OrientDBConfig . defaultConfig ()); ODatabaseDocument db = orientDB . open ( \"dbname\" , \"admin\" , \"admin\" ); ... Connecting using sockets \u00b6 If you want to connect to your embedded instance over sockets, it's best to have your orient client initialization inside your own Managed object. This is the best way to make sure the connection logic is run after server start. OrientDB orientDb = new OrientDB ( \"remote:localhost\" , \"root\" , \"root\" , OrientDBConfig . defaultConfig ()); ODatabaseDocument db = orientDB . open ( \"dbname\" , \"admin\" , \"admin\" ); Console \u00b6 You can also access embedded orient with console. This could be used for first initialization (to run initialization sql scripts). Read more about console usage . Admin servlet \u00b6 The state of embedded orient server could be seen in admin servlet: http://localhost:8081/orient . http://localhost:8081/orient/studio/ redirects to embedded studio (if deployed). Could be disabled if required.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Releases are published to bintray jcenter (package appear immediately after release) and then to maven central (require few days after release to be published). Maven: <dependency> <groupId> ru.vyarus </groupId> <artifactId> dropwizard-orient-server </artifactId> <version> 3.0.0 </version> </dependency> Gradle: compile 'ru.vyarus:dropwizard-orient-server:3.0.0' Version works with orient 3.0 and dropwizard 2.0.0. For other versions see compatibility matrix .","title":"Installation"},{"location":"getting-started/#usage","text":"Configuration class must contain OrientServerConfiguration : public class MyConfiguration extends Configuration { @NotNull @Valid private OrientServerConfiguration orientServer ; @Override public OrientServerConfiguration getOrientServer () { return orientServer ; } @JsonProperty ( \"orient-server\" ) public void setOrientServer ( OrientServerConfiguration orientServer ) { this . orientServer = orientServer ; } } Note It's not required to have not null orient configuration. If OrientServerConfiguration is null orient server will simply not start. Register orient bundle in application class: @Override public void initialize ( final Bootstrap < MyConfiguration > bootstrap ) { bootstrap . addBundle ( new OrientServerBundle < MyConfiguration >( MyConfiguration :: getOrientServer )); }","title":"Usage"},{"location":"getting-started/#configuration","text":"You can start with the default configuration . Read more about configuration .","title":"Configuration"},{"location":"getting-started/#plugins","text":"You can also enable orient plugins : studio lucene etl graph server Note Plugins could be loaded dynamically or statically . You may also need plugins from enterprise edition in order to use query profiler.","title":"Plugins"},{"location":"getting-started/#client-initialization","text":"Server lifecycle is managed using a Managed object, so the embedded server will start only together with jetty ( server command). Managed instances are started after all bundles run methods and even after application run method, so server will be unreachable if you try to access it from these methods.","title":"Client initialization"},{"location":"getting-started/#connecting-using-plocal","text":"The most efficient way to connect to the embedded database is using plocal . This engine writes to the file system to store data. There is a LOG of changes to restore the storage in case of a crash. plocal doesn't require a started server and it's faster than remote connection. With an embedded server you would be able to use studio (remote connection) together with your application using plocal (win-win). Server stores database files in ${files-path}/databases folder, so plocal connection for server managed database would be: plocal:${files-path}/databases/dbname where ${files-path} should be replaced with path from server configuration and dbname is database name. Using new (3.0) api : OrientDB orientDB = new OrientDB ( \"embedded:${files-path}/databases\" , OrientDBConfig . defaultConfig ()); ODatabaseDocument db = orientDB . open ( \"dbname\" , \"admin\" , \"admin\" ); ...","title":"Connecting using plocal"},{"location":"getting-started/#connecting-using-sockets","text":"If you want to connect to your embedded instance over sockets, it's best to have your orient client initialization inside your own Managed object. This is the best way to make sure the connection logic is run after server start. OrientDB orientDb = new OrientDB ( \"remote:localhost\" , \"root\" , \"root\" , OrientDBConfig . defaultConfig ()); ODatabaseDocument db = orientDB . open ( \"dbname\" , \"admin\" , \"admin\" );","title":"Connecting using sockets"},{"location":"getting-started/#console","text":"You can also access embedded orient with console. This could be used for first initialization (to run initialization sql scripts). Read more about console usage .","title":"Console"},{"location":"getting-started/#admin-servlet","text":"The state of embedded orient server could be seen in admin servlet: http://localhost:8081/orient . http://localhost:8081/orient/studio/ redirects to embedded studio (if deployed). Could be disabled if required.","title":"Admin servlet"},{"location":"about/compatibility/","text":"OrientDB compatibility \u00b6 OrientDB Dropwizard dropwizard-orient-server 3.0 2.0.0 3.0.0 3.0 1.3.5 2.2.0 2.2.17 1.1.4 2.1.0 2.2.0 - 2.2.17 (studio webjar, lucene as plugin) 1.0 1.4.0 2.0 - 2.1 0.8 - 1.0 1.3.0 1.0 0.8 1.1.1 1.0 0.7 1.1.0","title":"Compatibility"},{"location":"about/compatibility/#orientdb-compatibility","text":"OrientDB Dropwizard dropwizard-orient-server 3.0 2.0.0 3.0.0 3.0 1.3.5 2.2.0 2.2.17 1.1.4 2.1.0 2.2.0 - 2.2.17 (studio webjar, lucene as plugin) 1.0 1.4.0 2.0 - 2.1 0.8 - 1.0 1.3.0 1.0 0.8 1.1.1 1.0 0.7 1.1.0","title":"OrientDB compatibility"},{"location":"about/history/","text":"3.0.0 (2019-12-19) \u00b6 Dropwizard 2.0.0 compatibility fix Update to orient 3.0.26 Disable hibernate validator JPA support only if orient object support used (only in this case misactivation happen). (breaking) Removed HasOrientServerConfiguration interface. Instead, configuration provider must be registered: new OrientServerBundle<MyConfig>(MyConfig::getOrientConfig) 2.2.0 (2018-10-20) \u00b6 Orient 3 (3.0.9) compatibility OGlobalConfiguration.SERVER_BACKWARD_COMPATIBILITY set to false Update dropwizard 1.1.4 -> 1.3.7 Orient 3 configuration changes: - Some properties removed (like plugin.dynamic or plugin.hotReload). See com.orientechnologies.orient.core.config.OGlobalConfiguration for the list of available properties - Gephi command changed from com.orientechnologies.orient.graph.server.command.OServerCommandGetGephi to com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi - New handler available (could be added into config): com.orientechnologies.orient.server.handler.OCustomSQLFunctionPlugin 2.1.0 (2017-09-03) \u00b6 Update orient 2.2.17 -> 2.2.26 Update dropwizard 1.0.6 -> 1.1.4 Support multiple listeners of one protocol (e.g. binary and binary ssl): Studio installed only in one listener: https or first http listener (if no https) /orient servlet show all listener ports and indicates ssl configured on port /orient/studio redirect to https when https listener configured (#7) Rewrite relative keystore paths in orient sockets config (OServerTLSSocketFactory) to absolute paths relative to application startup dir (if file exists). By default orient resolve keystore locations from ORIENTDB_HOME, but most likely, orient and dropwizard will be both configured to use ssl and it may be handy to refer to the same keystore relatively. Add auto-ssl option to enable automatic orient ssl configuration when dropwizard main context has https configuration (experimental, not intended for production) 2.0.0 (2017-02-25) \u00b6 Update orient 2.2.10 -> 2.2.17 Update dropwizard 1.0.2 -> 1.0.6 (breaking) Support official studio jar instead of webjar (not supported anymore!). Studio version not shown anymore in orient servlet. (#4) Simplify configuration: allow writing name and value properties as one (name: value). Affects properties and parameters sections for commands and handlers and protocols section Add orient specify configuration (security.json) support in yaml (security property) or as path to file (security-file property). Path configuration properties \"files-path\", \"config-file\" and \"security-file\" may use system (or environment) properties with ${prop} syntax. Also special properties $TMP (java.io.tmpdir alias), $FILES_HOME (files-path property value) and $APP_HOME (application start directory) are allowed. NOTE: lucene is not orient plugin anymore and so does not require extra configuration configuration samples were updated according to the latest orient configs and using new simplified properties format 1.4.0 (2016-09-30) \u00b6 Update to orient 2.2 (fix compatibility) Update to dropwizard 1.0 1.3.0 (2015-08-31) \u00b6 Orient studio removed from jar: external optional studio webjar used instead Add orient info servlet installed in admin context ( /orient ). Special url /orient/studio redirects to embedded studio (automatically resolve correct port from configuration) 1.2.0 (2015-03-19) \u00b6 Update orient (1.7.10 -> 2.0.5) Update studio Update example configurations Add validation for root user presence in configuration: otherwise orient would ask for password on each start Health check now checks that server is active and storages available (memory check removed because its not available in orient 2) Fix console command help (clean urls) 1.1.1 (2014-11-25) \u00b6 Update dropwizard (0.7 -> 0.8.rc1) Update orient (1.7.9 -> 1.7.10) Drop java 1.6 support 1.1.0 (2014-10-06) \u00b6 Update orient (1.7.8 > 1.7.9) - important hotfix Add health check 1.0.1 (2014-09-05) \u00b6 Avoid print server config users in console help Fix pom (fix scope of dropwizard-test dependency) 1.0.0 (2014-08-25) \u00b6 Initial release","title":"Release notes"},{"location":"about/history/#300-2019-12-19","text":"Dropwizard 2.0.0 compatibility fix Update to orient 3.0.26 Disable hibernate validator JPA support only if orient object support used (only in this case misactivation happen). (breaking) Removed HasOrientServerConfiguration interface. Instead, configuration provider must be registered: new OrientServerBundle<MyConfig>(MyConfig::getOrientConfig)","title":"3.0.0 (2019-12-19)"},{"location":"about/history/#220-2018-10-20","text":"Orient 3 (3.0.9) compatibility OGlobalConfiguration.SERVER_BACKWARD_COMPATIBILITY set to false Update dropwizard 1.1.4 -> 1.3.7 Orient 3 configuration changes: - Some properties removed (like plugin.dynamic or plugin.hotReload). See com.orientechnologies.orient.core.config.OGlobalConfiguration for the list of available properties - Gephi command changed from com.orientechnologies.orient.graph.server.command.OServerCommandGetGephi to com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi - New handler available (could be added into config): com.orientechnologies.orient.server.handler.OCustomSQLFunctionPlugin","title":"2.2.0 (2018-10-20)"},{"location":"about/history/#210-2017-09-03","text":"Update orient 2.2.17 -> 2.2.26 Update dropwizard 1.0.6 -> 1.1.4 Support multiple listeners of one protocol (e.g. binary and binary ssl): Studio installed only in one listener: https or first http listener (if no https) /orient servlet show all listener ports and indicates ssl configured on port /orient/studio redirect to https when https listener configured (#7) Rewrite relative keystore paths in orient sockets config (OServerTLSSocketFactory) to absolute paths relative to application startup dir (if file exists). By default orient resolve keystore locations from ORIENTDB_HOME, but most likely, orient and dropwizard will be both configured to use ssl and it may be handy to refer to the same keystore relatively. Add auto-ssl option to enable automatic orient ssl configuration when dropwizard main context has https configuration (experimental, not intended for production)","title":"2.1.0 (2017-09-03)"},{"location":"about/history/#200-2017-02-25","text":"Update orient 2.2.10 -> 2.2.17 Update dropwizard 1.0.2 -> 1.0.6 (breaking) Support official studio jar instead of webjar (not supported anymore!). Studio version not shown anymore in orient servlet. (#4) Simplify configuration: allow writing name and value properties as one (name: value). Affects properties and parameters sections for commands and handlers and protocols section Add orient specify configuration (security.json) support in yaml (security property) or as path to file (security-file property). Path configuration properties \"files-path\", \"config-file\" and \"security-file\" may use system (or environment) properties with ${prop} syntax. Also special properties $TMP (java.io.tmpdir alias), $FILES_HOME (files-path property value) and $APP_HOME (application start directory) are allowed. NOTE: lucene is not orient plugin anymore and so does not require extra configuration configuration samples were updated according to the latest orient configs and using new simplified properties format","title":"2.0.0 (2017-02-25)"},{"location":"about/history/#140-2016-09-30","text":"Update to orient 2.2 (fix compatibility) Update to dropwizard 1.0","title":"1.4.0 (2016-09-30)"},{"location":"about/history/#130-2015-08-31","text":"Orient studio removed from jar: external optional studio webjar used instead Add orient info servlet installed in admin context ( /orient ). Special url /orient/studio redirects to embedded studio (automatically resolve correct port from configuration)","title":"1.3.0 (2015-08-31)"},{"location":"about/history/#120-2015-03-19","text":"Update orient (1.7.10 -> 2.0.5) Update studio Update example configurations Add validation for root user presence in configuration: otherwise orient would ask for password on each start Health check now checks that server is active and storages available (memory check removed because its not available in orient 2) Fix console command help (clean urls)","title":"1.2.0 (2015-03-19)"},{"location":"about/history/#111-2014-11-25","text":"Update dropwizard (0.7 -> 0.8.rc1) Update orient (1.7.9 -> 1.7.10) Drop java 1.6 support","title":"1.1.1 (2014-11-25)"},{"location":"about/history/#110-2014-10-06","text":"Update orient (1.7.8 > 1.7.9) - important hotfix Add health check","title":"1.1.0 (2014-10-06)"},{"location":"about/history/#101-2014-09-05","text":"Avoid print server config users in console help Fix pom (fix scope of dropwizard-test dependency)","title":"1.0.1 (2014-09-05)"},{"location":"about/history/#100-2014-08-25","text":"Initial release","title":"1.0.0 (2014-08-25)"},{"location":"about/license/","text":"The MIT License (MIT) Copyright \u00a9 2014-2019, Vyacheslav Rusakov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/support/","text":"Support \u00b6 Gitter - chat Github issues - problems / enhancements","title":"Support"},{"location":"about/support/#support","text":"Gitter - chat Github issues - problems / enhancements","title":"Support"},{"location":"guide/configuration/","text":"Configuration \u00b6 Define orient section in application config yaml file: orient-server : start : true files-path : $TMP/db/ config : ... # optional orient security configuration security : ... Note Orient server configuration could be declared directly in dropwizard configuration yaml or as external xml file (like in orient distribution). Option Description start enables or disables orient server start (the same effect will be if orient configuration section will not exist, this option exist to allow disabling server without removing entire config section) admin-servlet enables or disables orient admin servlet installation ( /orient ). Enabled by default files-path defines folder, where orient will store database files. May be not existing directory - orient will create it when necessary. Will be set as value for ORIENTDB_HOME environment variable config section defines orient server configuration . Orient use xml format for configuration files and this section is simply yaml representation of xml config. Special shortcuts supported for properties and parameters sections (see example configuration ). config-file used to specify path to xml configuration file instead of direct yaml configuration in 'config' section. See example xml config (taken from orient distribution) security section defines orient security configuration . In orient distribution security configured with security.json file. This section is implicitly converted to json file and configured for orient. Optional: when no server configuration defined, orient only prints error log message, but everything works. security-file used to specify path to security.json file instead of direct yaml configuration in 'security' section. See example json config auto-ssl used to enable automatic ssl configuration for orient listeners , when dropwizard main context is configured to use https. This is experimental feature. Path properties files-path , config-file and security-file may use special symbols: Property Description $TMP system temp directory (java.io.tmpdir) $APP_HOME application starting directory ('.') $FILES_HOME directory configured by files-path property ${prop} where prop is any system property or environment variable Important User root must be defined in configuration, because orient 2 asks for root user password on start, and in embedded mode it can't save it (so will ask on each start). To avoid this case, error is thrown if no 'root' user defined. Also, note that server users and database users are different! In default configuration root and guest users defined for server. When new database created, orient will create default database users: admin , reader , writer . Security section configures database security (not server). Distribution configuration reference \u00b6 Configuration folder (config/) in orient distribution reference: file name description configured as orientdb-server-config.xml Main configuration config (yaml) or config-file (xml) security.json Database security configuration security (yaml) or security-file (json) automatic-backup.json Backup configuration Reference to file may be set OAutomaticBackup handler property. May be configured directly with handler properties (old way). hazelcast.xml and default-distributed-db-config.json Distributed configuration Requires additional dependency ( orientdb-distributed ). Links to files set in OHazelcastPlugin handler properties. orientdb-client-log.properties and orientdb-server-log.properties Logging configuration Not needed. Tip If you want to replicate orientdb server layout (merge it with your app folder), you can do it like this: APP HOME/ config/ config.xml security.json backup.json orient-server : files-path : $APP_HOME config-file : $APP_HOME/config/config.xml security-file : $APP_HOME/config/security.json Correct reference to backup.json set in config.xml (OAutomaticBackup handler configuration). Orient will create databases in: $APP_HOME/databases/name . Of course, config.xml, security.json and backup.json may be configured in yaml. It's just an example to better understand configuration. Graph server \u00b6 By default, server supports document and object databases. If graph db required you'll need to add graph dependency: com.orientechnologies:orientdb-graphdb:3.0.26 . Graph related sections are commented in default yaml config : Enable this section if gremlin support required - clazz : com.orientechnologies.orient.graph.handler.OGraphServerHandler parameters : - enabled : true Enable this section if gephi support required (requires OGraphServerHandler if gremlin queries used) Note Gremlin has become optional since 2.2.0 . You will have to add an additional explicit dependency to enable Gremlin. pattern : 'GET|gephi/*' implementation : com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi Lucene plugin \u00b6 Orient 2 distribution includes lucene plugin out of the box. To enable lucene indexes in embedded server add dependency: com.orientechnologies:orientdb-lucene:3.0.26 . Plugin will be automatically registered. Note It's actually not an \"orient plugin\" anymore and so not shown in registered orient plugins (in orient servlet). Lucene plugin includes dependency on graph, so explicit graph dependency could be avoided. ETL \u00b6 To use ETL add dependency com.orientechnologies:orientdb-etl:3.0.26 ETL plugin includes dependency on graph, so explicit graph dependency could be avoided. Admin servlet \u00b6 If embedded server is started, special orient info servlet is available in admin context: http://localhost:8081/orient . It shows basic info about server configuration, link to embedded studio and links to most useful orient documentation pages. Special url http://localhost:8081/orient/studio/ redirects to embedded studio. Servlet installation may be disabled in configuration: orient-server : admin-servlet : false","title":"Configuration"},{"location":"guide/configuration/#configuration","text":"Define orient section in application config yaml file: orient-server : start : true files-path : $TMP/db/ config : ... # optional orient security configuration security : ... Note Orient server configuration could be declared directly in dropwizard configuration yaml or as external xml file (like in orient distribution). Option Description start enables or disables orient server start (the same effect will be if orient configuration section will not exist, this option exist to allow disabling server without removing entire config section) admin-servlet enables or disables orient admin servlet installation ( /orient ). Enabled by default files-path defines folder, where orient will store database files. May be not existing directory - orient will create it when necessary. Will be set as value for ORIENTDB_HOME environment variable config section defines orient server configuration . Orient use xml format for configuration files and this section is simply yaml representation of xml config. Special shortcuts supported for properties and parameters sections (see example configuration ). config-file used to specify path to xml configuration file instead of direct yaml configuration in 'config' section. See example xml config (taken from orient distribution) security section defines orient security configuration . In orient distribution security configured with security.json file. This section is implicitly converted to json file and configured for orient. Optional: when no server configuration defined, orient only prints error log message, but everything works. security-file used to specify path to security.json file instead of direct yaml configuration in 'security' section. See example json config auto-ssl used to enable automatic ssl configuration for orient listeners , when dropwizard main context is configured to use https. This is experimental feature. Path properties files-path , config-file and security-file may use special symbols: Property Description $TMP system temp directory (java.io.tmpdir) $APP_HOME application starting directory ('.') $FILES_HOME directory configured by files-path property ${prop} where prop is any system property or environment variable Important User root must be defined in configuration, because orient 2 asks for root user password on start, and in embedded mode it can't save it (so will ask on each start). To avoid this case, error is thrown if no 'root' user defined. Also, note that server users and database users are different! In default configuration root and guest users defined for server. When new database created, orient will create default database users: admin , reader , writer . Security section configures database security (not server).","title":"Configuration"},{"location":"guide/configuration/#distribution-configuration-reference","text":"Configuration folder (config/) in orient distribution reference: file name description configured as orientdb-server-config.xml Main configuration config (yaml) or config-file (xml) security.json Database security configuration security (yaml) or security-file (json) automatic-backup.json Backup configuration Reference to file may be set OAutomaticBackup handler property. May be configured directly with handler properties (old way). hazelcast.xml and default-distributed-db-config.json Distributed configuration Requires additional dependency ( orientdb-distributed ). Links to files set in OHazelcastPlugin handler properties. orientdb-client-log.properties and orientdb-server-log.properties Logging configuration Not needed. Tip If you want to replicate orientdb server layout (merge it with your app folder), you can do it like this: APP HOME/ config/ config.xml security.json backup.json orient-server : files-path : $APP_HOME config-file : $APP_HOME/config/config.xml security-file : $APP_HOME/config/security.json Correct reference to backup.json set in config.xml (OAutomaticBackup handler configuration). Orient will create databases in: $APP_HOME/databases/name . Of course, config.xml, security.json and backup.json may be configured in yaml. It's just an example to better understand configuration.","title":"Distribution configuration reference"},{"location":"guide/configuration/#graph-server","text":"By default, server supports document and object databases. If graph db required you'll need to add graph dependency: com.orientechnologies:orientdb-graphdb:3.0.26 . Graph related sections are commented in default yaml config : Enable this section if gremlin support required - clazz : com.orientechnologies.orient.graph.handler.OGraphServerHandler parameters : - enabled : true Enable this section if gephi support required (requires OGraphServerHandler if gremlin queries used) Note Gremlin has become optional since 2.2.0 . You will have to add an additional explicit dependency to enable Gremlin. pattern : 'GET|gephi/*' implementation : com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi","title":"Graph server"},{"location":"guide/configuration/#lucene-plugin","text":"Orient 2 distribution includes lucene plugin out of the box. To enable lucene indexes in embedded server add dependency: com.orientechnologies:orientdb-lucene:3.0.26 . Plugin will be automatically registered. Note It's actually not an \"orient plugin\" anymore and so not shown in registered orient plugins (in orient servlet). Lucene plugin includes dependency on graph, so explicit graph dependency could be avoided.","title":"Lucene plugin"},{"location":"guide/configuration/#etl","text":"To use ETL add dependency com.orientechnologies:orientdb-etl:3.0.26 ETL plugin includes dependency on graph, so explicit graph dependency could be avoided.","title":"ETL"},{"location":"guide/configuration/#admin-servlet","text":"If embedded server is started, special orient info servlet is available in admin context: http://localhost:8081/orient . It shows basic info about server configuration, link to embedded studio and links to most useful orient documentation pages. Special url http://localhost:8081/orient/studio/ redirects to embedded studio. Servlet installation may be disabled in configuration: orient-server : admin-servlet : false","title":"Admin servlet"},{"location":"guide/console/","text":"Console \u00b6 Internally bundle registers orient console command ( ConsoleCommand ). Console may be used in interactive mode, to execute command(s) or to process commands file. Console is very efficient for learning orient (playing with queries) and may be used to easily run predefined scripts. If started without additional parameters, console will be in interactive mode: $ [ .. ] console config.yml Where [..] is main class definition (like java MyApp or java -jar app.jar MyApp ) and config.yml is your application yaml config. Note Console launching will not start orient server, but you can use it alongside with started application. Also, you can use plocal connection to work with db from console even without server (see console output, it will suggest connection commands) To execute command directly, write it as additional argument: $ [ .. ] console config.yaml help This will start console, execute help command and exit. More than one command may be executed (commands must be separated with ';') And the last option is to launch sql fie, for example commands.sql: set echo true ; create database memory : test ; select from OUser ; drop database ; $ [ .. ] console config.yaml commands.sql Will execute all commands in file and exit. Note that set echo true enables additional logs (may be useful for debug). Another useful flag is set ignoreErrors true . For complete documentation see orient console doc","title":"Console"},{"location":"guide/console/#console","text":"Internally bundle registers orient console command ( ConsoleCommand ). Console may be used in interactive mode, to execute command(s) or to process commands file. Console is very efficient for learning orient (playing with queries) and may be used to easily run predefined scripts. If started without additional parameters, console will be in interactive mode: $ [ .. ] console config.yml Where [..] is main class definition (like java MyApp or java -jar app.jar MyApp ) and config.yml is your application yaml config. Note Console launching will not start orient server, but you can use it alongside with started application. Also, you can use plocal connection to work with db from console even without server (see console output, it will suggest connection commands) To execute command directly, write it as additional argument: $ [ .. ] console config.yaml help This will start console, execute help command and exit. More than one command may be executed (commands must be separated with ';') And the last option is to launch sql fie, for example commands.sql: set echo true ; create database memory : test ; select from OUser ; drop database ; $ [ .. ] console config.yaml commands.sql Will execute all commands in file and exit. Note that set echo true enables additional logs (may be useful for debug). Another useful flag is set ignoreErrors true . For complete documentation see orient console doc","title":"Console"},{"location":"guide/default-configs/","text":"Default config files \u00b6 Yaml config \u00b6 Dropwizard configuration with both orient and security configs declared as yaml: orient-server : files-path : $TMP/db/ config : users : - name : root password : root resources : '*' - name : guest password : guest resources : 'connect,server.listDatabases,server.dblist' handlers : # enable below lines if graph version used and gremlin support required # - clazz: com.orientechnologies.orient.graph.handler.OGraphServerHandler # parameters: # - enabled: true # - graph.pool.max: 50 # enable for distributed mode support (requires extra orientdb-distributed dependency) # - clazz: com.orientechnologies.orient.server.hazelcast.OHazelcastPlugin # parameters: # - enabled: true # - configuration.db.default: '${ORIENTDB_HOME}/config/default-distributed-db-config.json' # - configuration.hazelcast: '${ORIENTDB_HOME}/config/hazelcast.xml' # enable for defining sql functions in json file # - clazz: com.orientechnologies.orient.server.handler.OCustomSQLFunctionPlugin # parameters: # - config: ${ORIENTDB_HOME}/config/custom-sql-functions.json - clazz : com.orientechnologies.orient.server.handler.OJMXPlugin parameters : - enabled : true - profilerManaged : true - clazz : com.orientechnologies.orient.server.handler.OAutomaticBackup parameters : # may be configured with separate json file (see distribution) # - config: '${ORIENTDB_HOME}/config/automatic-backup.json' - enabled : false - mode : FULL_BACKUP - exportOptions : - firstTime : 23:00:00 - delay : 4h - target.directory : backup - target.fileName : '${DBNAME}-${DATE:yyyyMMddHHmmss}.zip' - compressionLevel : 9 - bufferSize : 1048576 - db.include : - db.exclude : - clazz : com.orientechnologies.orient.server.handler.OServerSideScriptInterpreter parameters : - enabled : true - allowedLanguages : SQL network : # example of custom sockets configuration # sockets: # - name: ssl # implementation: com.orientechnologies.orient.server.network.OServerTLSSocketFactory # parameters: # - network.ssl.clientAuth: false # - network.ssl.keyStore: 'config/cert/orientdb.ks' # - network.ssl.keyStorePassword: password # - network.ssl.trustStore: 'config/cert/orientdb.ks' # - network.ssl.trustStorePassword: password # - name: https # implementation: com.orientechnologies.orient.server.network.OServerTLSSocketFactory # parameters: # - network.ssl.clientAuth: false # - network.ssl.keyStore: 'config/cert/orientdb.ks' # - network.ssl.keyStorePassword: password # - network.ssl.trustStore: 'config/cert/orientdb.ks' # - network.ssl.trustStorePassword: password protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2424-2430 socket : default - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : default parameters : - network.http.charset : utf-8 - network.http.jsonResponseError : true commands : - pattern : 'GET|www GET|studio/ GET| GET|*.htm GET|*.html GET|*.xml GET|*.jpeg GET|*.jpg GET|*.png GET|*.gif GET|*.js GET|*.css GET|*.swf GET|*.ico GET|*.txt GET|*.otf GET|*.pjs GET|*.svg GET|*.json GET|*.woff GET|*.woff2 GET|*.ttf GET|*.svgz' implementation : com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetStaticContent stateful : false parameters : - http.cache:*.htm *.html : 'Cache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\nPragma: no-cache' - http.cache:default : 'Cache-Control: max-age=120' # enable below lines if graph version used and gephi support required # - pattern: 'GET|gephi/*' # stateful: false # implementation: com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi properties : # see com.orientechnologies.orient.core.config.OGlobalConfiguration for all supported properties - profiler.enabled : true #configures the profiler as <seconds-for-snapshot>,<archive-snapshot-size>,<summary-size> - profiler.config : '30,10,10' security : enabled : true debug : false server : createDefaultUsers : true authentication : enabled : true allowDefault : true authenticators : - name : Password class : com.orientechnologies.orient.server.security.authenticator.ODefaultPasswordAuthenticator enabled : true users : - username : \"guest\" resources : \"server.listDatabases,server.dblist\" - name : ServerConfig class : com.orientechnologies.orient.server.security.authenticator.OServerConfigAuthenticator enabled : true - name : SystemAuthenticator class : com.orientechnologies.orient.server.security.authenticator.OSystemUserAuthenticator enabled : true auditing : class : com.orientechnologies.security.auditing.ODefaultAuditing enabled : false Xml config \u00b6 The same as previous, but orient configuration declared in external xml file: orient-server : files-path : $TMP/db/ config-file : 'conf/sample.xml' # security section omitted <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <orient-server> <handlers> <!-- enable below lines if graph version used and gremlin support required --> <!--<handler class=\"com.orientechnologies.orient.graph.handler.OGraphServerHandler\">--> <!--<parameters>--> <!--<parameter value=\"true\" name=\"enabled\"/>--> <!--<parameter value=\"50\" name=\"graph.pool.max\"/>--> <!--</parameters>--> <!--</handler>--> <!-- enable for distributed usage (requires orientdb-distributed dependency) --> <!--<handler class=\"com.orientechnologies.orient.server.hazelcast.OHazelcastPlugin\">--> <!--<parameters>--> <!--<parameter value=\"${distributed}\" name=\"enabled\"/>--> <!--<parameter value=\"${ORIENTDB_HOME}/config/default-distributed-db-config.json\" name=\"configuration.db.default\"/>--> <!--<parameter value=\"${ORIENTDB_HOME}/config/hazelcast.xml\" name=\"configuration.hazelcast\"/>--> <!--</parameters>--> <!--</handler>--> <!-- JMX SERVER, TO TURN ON SET THE 'ENABLED' PARAMETER TO 'true' --> <handler class= \"com.orientechnologies.orient.server.handler.OJMXPlugin\" > <parameters> <parameter value= \"false\" name= \"enabled\" /> <parameter value= \"true\" name= \"profilerManaged\" /> </parameters> </handler> <!-- AUTOMATIC BACKUP, TO TURN ON SET THE 'ENABLED' PARAMETER TO 'true' --> <handler class= \"com.orientechnologies.orient.server.handler.OAutomaticBackup\" > <parameters> <parameter value= \"false\" name= \"enabled\" /> <!-- separate config file may be used with (see original orient distribution config) --> <!--<parameter value=\"${ORIENTDB_HOME}/config/automatic-backup.json\" name=\"config\"/>--> <parameter name= \"enabled\" value= \"false\" /> <parameter name= \"mode\" value= \"FULL_BACKUP\" /> <parameter name= \"exportOptions\" value= \"\" /> <parameter name= \"delay\" value= \"4h\" /> <parameter name= \"firstTime\" value= \"23:00:00\" /> <parameter name= \"target.directory\" value= \"backup\" /> <parameter name= \"target.fileName\" value= \"${DBNAME}-${DATE:yyyyMMddHHmmss}.zip\" /> <parameter name= \"compressionLevel\" value= \"9\" /> <parameter name= \"bufferSize\" value= \"1048576\" /> <!-- if empty, backups all databases --> <parameter name= \"db.include\" value= \"\" /> <parameter name= \"db.exclude\" value= \"\" /> <!-- USE COMMA TO SEPARATE MULTIPLE DATABASE NAMES --> </parameters> </handler> <!-- SERVER SIDE SCRIPT INTERPRETER. WARNING! THIS CAN BE A SECURITY HOLE: ENABLE IT ONLY IF CLIENTS ARE TRUST, TO TURN ON SET THE 'ENABLED' PARAMETER TO 'true' --> <handler class= \"com.orientechnologies.orient.server.handler.OServerSideScriptInterpreter\" > <parameters> <parameter value= \"true\" name= \"enabled\" /> <parameter value= \"SQL\" name= \"allowedLanguages\" /> </parameters> </handler> </handlers> <network> <sockets> <socket implementation= \"com.orientechnologies.orient.server.network.OServerTLSSocketFactory\" name= \"ssl\" > <parameters> <parameter value= \"false\" name= \"network.ssl.clientAuth\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.keyStore\" /> <parameter value= \"password\" name= \"network.ssl.keyStorePassword\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.trustStore\" /> <parameter value= \"password\" name= \"network.ssl.trustStorePassword\" /> </parameters> </socket> <socket implementation= \"com.orientechnologies.orient.server.network.OServerTLSSocketFactory\" name= \"https\" > <parameters> <parameter value= \"false\" name= \"network.ssl.clientAuth\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.keyStore\" /> <parameter value= \"password\" name= \"network.ssl.keyStorePassword\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.trustStore\" /> <parameter value= \"password\" name= \"network.ssl.trustStorePassword\" /> </parameters> </socket> </sockets> <protocols> <protocol implementation= \"com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary\" name= \"binary\" /> <protocol implementation= \"com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb\" name= \"http\" /> </protocols> <listeners> <listener protocol= \"binary\" socket= \"default\" port-range= \"2424-2430\" ip-address= \"0.0.0.0\" /> <listener protocol= \"http\" socket= \"default\" port-range= \"2480-2490\" ip-address= \"0.0.0.0\" > <commands> <command implementation= \"com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetStaticContent\" pattern= \"GET|www GET|studio/ GET| GET|*.htm GET|*.html GET|*.xml GET|*.jpeg GET|*.jpg GET|*.png GET|*.gif GET|*.js GET|*.css GET|*.swf GET|*.ico GET|*.txt GET|*.otf GET|*.pjs GET|*.svg GET|*.json GET|*.woff GET|*.woff2 GET|*.ttf GET|*.svgz\" stateful= \"false\" > <parameters> <entry value= \"Cache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\nPragma: no-cache\" name= \"http.cache:*.htm *.html\" /> <entry value= \"Cache-Control: max-age=120\" name= \"http.cache:default\" /> </parameters> </command> <command implementation= \"com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi\" pattern= \"GET|gephi/*\" stateful= \"false\" /> </commands> <parameters> <parameter value= \"utf-8\" name= \"network.http.charset\" /> <parameter value= \"true\" name= \"network.http.jsonResponseError\" /> </parameters> </listener> </listeners> </network> <storages/> <users> <user resources= \"*\" password= \"root\" name= \"root\" /> <user resources= \"connect,server.listDatabases,server.dblist\" password= \"guest\" name= \"guest\" /> </users> <properties> <entry value= \"1\" name= \"db.pool.min\" /> <entry value= \"50\" name= \"db.pool.max\" /> <entry value= \"false\" name= \"profiler.enabled\" /> </properties> </orient-server> Json security config \u00b6 Security config defined in external json file: orient-server : files-path : $TMP/db/ # may be declared as yaml config-file : 'conf/sample.xml' security-file : 'conf/security.json' { \"enabled\" : true , \"debug\" : false , \"server\" : { \"createDefaultUsers\" : true }, \"authentication\" : { \"enabled\" : true , \"allowDefault\" : true , \"authenticators\" : [ { \"name\" : \"Password\" , \"class\" : \"com.orientechnologies.orient.server.security.authenticator.ODefaultPasswordAuthenticator\" , \"enabled\" : true , \"users\" : [ { \"username\" : \"guest\" , \"resources\" : \"server.listDatabases,server.dblist\" } ] }, { \"name\" : \"ServerConfig\" , \"class\" : \"com.orientechnologies.orient.server.security.authenticator.OServerConfigAuthenticator\" , \"enabled\" : true }, { \"name\" : \"SystemAuthenticator\" , \"class\" : \"com.orientechnologies.orient.server.security.authenticator.OSystemUserAuthenticator\" , \"enabled\" : true } ] }, \"auditing\" : { \"class\" : \"com.orientechnologies.security.auditing.ODefaultAuditing\" , \"enabled\" : false } }","title":"Default configs"},{"location":"guide/default-configs/#default-config-files","text":"","title":"Default config files"},{"location":"guide/default-configs/#yaml-config","text":"Dropwizard configuration with both orient and security configs declared as yaml: orient-server : files-path : $TMP/db/ config : users : - name : root password : root resources : '*' - name : guest password : guest resources : 'connect,server.listDatabases,server.dblist' handlers : # enable below lines if graph version used and gremlin support required # - clazz: com.orientechnologies.orient.graph.handler.OGraphServerHandler # parameters: # - enabled: true # - graph.pool.max: 50 # enable for distributed mode support (requires extra orientdb-distributed dependency) # - clazz: com.orientechnologies.orient.server.hazelcast.OHazelcastPlugin # parameters: # - enabled: true # - configuration.db.default: '${ORIENTDB_HOME}/config/default-distributed-db-config.json' # - configuration.hazelcast: '${ORIENTDB_HOME}/config/hazelcast.xml' # enable for defining sql functions in json file # - clazz: com.orientechnologies.orient.server.handler.OCustomSQLFunctionPlugin # parameters: # - config: ${ORIENTDB_HOME}/config/custom-sql-functions.json - clazz : com.orientechnologies.orient.server.handler.OJMXPlugin parameters : - enabled : true - profilerManaged : true - clazz : com.orientechnologies.orient.server.handler.OAutomaticBackup parameters : # may be configured with separate json file (see distribution) # - config: '${ORIENTDB_HOME}/config/automatic-backup.json' - enabled : false - mode : FULL_BACKUP - exportOptions : - firstTime : 23:00:00 - delay : 4h - target.directory : backup - target.fileName : '${DBNAME}-${DATE:yyyyMMddHHmmss}.zip' - compressionLevel : 9 - bufferSize : 1048576 - db.include : - db.exclude : - clazz : com.orientechnologies.orient.server.handler.OServerSideScriptInterpreter parameters : - enabled : true - allowedLanguages : SQL network : # example of custom sockets configuration # sockets: # - name: ssl # implementation: com.orientechnologies.orient.server.network.OServerTLSSocketFactory # parameters: # - network.ssl.clientAuth: false # - network.ssl.keyStore: 'config/cert/orientdb.ks' # - network.ssl.keyStorePassword: password # - network.ssl.trustStore: 'config/cert/orientdb.ks' # - network.ssl.trustStorePassword: password # - name: https # implementation: com.orientechnologies.orient.server.network.OServerTLSSocketFactory # parameters: # - network.ssl.clientAuth: false # - network.ssl.keyStore: 'config/cert/orientdb.ks' # - network.ssl.keyStorePassword: password # - network.ssl.trustStore: 'config/cert/orientdb.ks' # - network.ssl.trustStorePassword: password protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2424-2430 socket : default - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : default parameters : - network.http.charset : utf-8 - network.http.jsonResponseError : true commands : - pattern : 'GET|www GET|studio/ GET| GET|*.htm GET|*.html GET|*.xml GET|*.jpeg GET|*.jpg GET|*.png GET|*.gif GET|*.js GET|*.css GET|*.swf GET|*.ico GET|*.txt GET|*.otf GET|*.pjs GET|*.svg GET|*.json GET|*.woff GET|*.woff2 GET|*.ttf GET|*.svgz' implementation : com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetStaticContent stateful : false parameters : - http.cache:*.htm *.html : 'Cache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\nPragma: no-cache' - http.cache:default : 'Cache-Control: max-age=120' # enable below lines if graph version used and gephi support required # - pattern: 'GET|gephi/*' # stateful: false # implementation: com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi properties : # see com.orientechnologies.orient.core.config.OGlobalConfiguration for all supported properties - profiler.enabled : true #configures the profiler as <seconds-for-snapshot>,<archive-snapshot-size>,<summary-size> - profiler.config : '30,10,10' security : enabled : true debug : false server : createDefaultUsers : true authentication : enabled : true allowDefault : true authenticators : - name : Password class : com.orientechnologies.orient.server.security.authenticator.ODefaultPasswordAuthenticator enabled : true users : - username : \"guest\" resources : \"server.listDatabases,server.dblist\" - name : ServerConfig class : com.orientechnologies.orient.server.security.authenticator.OServerConfigAuthenticator enabled : true - name : SystemAuthenticator class : com.orientechnologies.orient.server.security.authenticator.OSystemUserAuthenticator enabled : true auditing : class : com.orientechnologies.security.auditing.ODefaultAuditing enabled : false","title":"Yaml config"},{"location":"guide/default-configs/#xml-config","text":"The same as previous, but orient configuration declared in external xml file: orient-server : files-path : $TMP/db/ config-file : 'conf/sample.xml' # security section omitted <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> <orient-server> <handlers> <!-- enable below lines if graph version used and gremlin support required --> <!--<handler class=\"com.orientechnologies.orient.graph.handler.OGraphServerHandler\">--> <!--<parameters>--> <!--<parameter value=\"true\" name=\"enabled\"/>--> <!--<parameter value=\"50\" name=\"graph.pool.max\"/>--> <!--</parameters>--> <!--</handler>--> <!-- enable for distributed usage (requires orientdb-distributed dependency) --> <!--<handler class=\"com.orientechnologies.orient.server.hazelcast.OHazelcastPlugin\">--> <!--<parameters>--> <!--<parameter value=\"${distributed}\" name=\"enabled\"/>--> <!--<parameter value=\"${ORIENTDB_HOME}/config/default-distributed-db-config.json\" name=\"configuration.db.default\"/>--> <!--<parameter value=\"${ORIENTDB_HOME}/config/hazelcast.xml\" name=\"configuration.hazelcast\"/>--> <!--</parameters>--> <!--</handler>--> <!-- JMX SERVER, TO TURN ON SET THE 'ENABLED' PARAMETER TO 'true' --> <handler class= \"com.orientechnologies.orient.server.handler.OJMXPlugin\" > <parameters> <parameter value= \"false\" name= \"enabled\" /> <parameter value= \"true\" name= \"profilerManaged\" /> </parameters> </handler> <!-- AUTOMATIC BACKUP, TO TURN ON SET THE 'ENABLED' PARAMETER TO 'true' --> <handler class= \"com.orientechnologies.orient.server.handler.OAutomaticBackup\" > <parameters> <parameter value= \"false\" name= \"enabled\" /> <!-- separate config file may be used with (see original orient distribution config) --> <!--<parameter value=\"${ORIENTDB_HOME}/config/automatic-backup.json\" name=\"config\"/>--> <parameter name= \"enabled\" value= \"false\" /> <parameter name= \"mode\" value= \"FULL_BACKUP\" /> <parameter name= \"exportOptions\" value= \"\" /> <parameter name= \"delay\" value= \"4h\" /> <parameter name= \"firstTime\" value= \"23:00:00\" /> <parameter name= \"target.directory\" value= \"backup\" /> <parameter name= \"target.fileName\" value= \"${DBNAME}-${DATE:yyyyMMddHHmmss}.zip\" /> <parameter name= \"compressionLevel\" value= \"9\" /> <parameter name= \"bufferSize\" value= \"1048576\" /> <!-- if empty, backups all databases --> <parameter name= \"db.include\" value= \"\" /> <parameter name= \"db.exclude\" value= \"\" /> <!-- USE COMMA TO SEPARATE MULTIPLE DATABASE NAMES --> </parameters> </handler> <!-- SERVER SIDE SCRIPT INTERPRETER. WARNING! THIS CAN BE A SECURITY HOLE: ENABLE IT ONLY IF CLIENTS ARE TRUST, TO TURN ON SET THE 'ENABLED' PARAMETER TO 'true' --> <handler class= \"com.orientechnologies.orient.server.handler.OServerSideScriptInterpreter\" > <parameters> <parameter value= \"true\" name= \"enabled\" /> <parameter value= \"SQL\" name= \"allowedLanguages\" /> </parameters> </handler> </handlers> <network> <sockets> <socket implementation= \"com.orientechnologies.orient.server.network.OServerTLSSocketFactory\" name= \"ssl\" > <parameters> <parameter value= \"false\" name= \"network.ssl.clientAuth\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.keyStore\" /> <parameter value= \"password\" name= \"network.ssl.keyStorePassword\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.trustStore\" /> <parameter value= \"password\" name= \"network.ssl.trustStorePassword\" /> </parameters> </socket> <socket implementation= \"com.orientechnologies.orient.server.network.OServerTLSSocketFactory\" name= \"https\" > <parameters> <parameter value= \"false\" name= \"network.ssl.clientAuth\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.keyStore\" /> <parameter value= \"password\" name= \"network.ssl.keyStorePassword\" /> <parameter value= \"config/cert/orientdb.ks\" name= \"network.ssl.trustStore\" /> <parameter value= \"password\" name= \"network.ssl.trustStorePassword\" /> </parameters> </socket> </sockets> <protocols> <protocol implementation= \"com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary\" name= \"binary\" /> <protocol implementation= \"com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb\" name= \"http\" /> </protocols> <listeners> <listener protocol= \"binary\" socket= \"default\" port-range= \"2424-2430\" ip-address= \"0.0.0.0\" /> <listener protocol= \"http\" socket= \"default\" port-range= \"2480-2490\" ip-address= \"0.0.0.0\" > <commands> <command implementation= \"com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetStaticContent\" pattern= \"GET|www GET|studio/ GET| GET|*.htm GET|*.html GET|*.xml GET|*.jpeg GET|*.jpg GET|*.png GET|*.gif GET|*.js GET|*.css GET|*.swf GET|*.ico GET|*.txt GET|*.otf GET|*.pjs GET|*.svg GET|*.json GET|*.woff GET|*.woff2 GET|*.ttf GET|*.svgz\" stateful= \"false\" > <parameters> <entry value= \"Cache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\nPragma: no-cache\" name= \"http.cache:*.htm *.html\" /> <entry value= \"Cache-Control: max-age=120\" name= \"http.cache:default\" /> </parameters> </command> <command implementation= \"com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetGephi\" pattern= \"GET|gephi/*\" stateful= \"false\" /> </commands> <parameters> <parameter value= \"utf-8\" name= \"network.http.charset\" /> <parameter value= \"true\" name= \"network.http.jsonResponseError\" /> </parameters> </listener> </listeners> </network> <storages/> <users> <user resources= \"*\" password= \"root\" name= \"root\" /> <user resources= \"connect,server.listDatabases,server.dblist\" password= \"guest\" name= \"guest\" /> </users> <properties> <entry value= \"1\" name= \"db.pool.min\" /> <entry value= \"50\" name= \"db.pool.max\" /> <entry value= \"false\" name= \"profiler.enabled\" /> </properties> </orient-server>","title":"Xml config"},{"location":"guide/default-configs/#json-security-config","text":"Security config defined in external json file: orient-server : files-path : $TMP/db/ # may be declared as yaml config-file : 'conf/sample.xml' security-file : 'conf/security.json' { \"enabled\" : true , \"debug\" : false , \"server\" : { \"createDefaultUsers\" : true }, \"authentication\" : { \"enabled\" : true , \"allowDefault\" : true , \"authenticators\" : [ { \"name\" : \"Password\" , \"class\" : \"com.orientechnologies.orient.server.security.authenticator.ODefaultPasswordAuthenticator\" , \"enabled\" : true , \"users\" : [ { \"username\" : \"guest\" , \"resources\" : \"server.listDatabases,server.dblist\" } ] }, { \"name\" : \"ServerConfig\" , \"class\" : \"com.orientechnologies.orient.server.security.authenticator.OServerConfigAuthenticator\" , \"enabled\" : true }, { \"name\" : \"SystemAuthenticator\" , \"class\" : \"com.orientechnologies.orient.server.security.authenticator.OSystemUserAuthenticator\" , \"enabled\" : true } ] }, \"auditing\" : { \"class\" : \"com.orientechnologies.security.auditing.ODefaultAuditing\" , \"enabled\" : false } }","title":"Json security config"},{"location":"guide/enterprise/","text":"Enterprise edition \u00b6 Orient Enterprise edition is actually community edition + agent plugin (if you fill in the form it will simply suggest you to download agent jar). Tip Some security features could be enabled in community edition This enterprise agent activates some hidden abilities like sql profiler. Dynamic agent installation \u00b6 Copy agent jar into plugins directory . Important If agent plugin is installed, jmx plugin must be configured like this: handlers : - clazz : com.orientechnologies.orient.server.handler.OJMXPlugin parameters : - name : enabled value : false - name : profilerManaged value : true This could be useful for temporary agent usage (not in production). Manual agent installation \u00b6 If you have enterprise license and want to include agent into your app distribution (instead of copying it manually on each environment): create libs folder in your project and move agent plugin into it in project add dependency for libs folder. For example, in gradle: runtime fileTree ( dir: 'libs' , include: '*.jar' ) change handlers section in config (add agent and change jmx parameters): handlers : - clazz : com.orientechnologies.agent.OEnterpriseAgent parameters : - name : license value : '@LICENSE@' - clazz : com.orientechnologies.orient.server.handler.OJMXPlugin parameters : - name : enabled value : false - name : profilerManaged value : true","title":"Enterprise"},{"location":"guide/enterprise/#enterprise-edition","text":"Orient Enterprise edition is actually community edition + agent plugin (if you fill in the form it will simply suggest you to download agent jar). Tip Some security features could be enabled in community edition This enterprise agent activates some hidden abilities like sql profiler.","title":"Enterprise edition"},{"location":"guide/enterprise/#dynamic-agent-installation","text":"Copy agent jar into plugins directory . Important If agent plugin is installed, jmx plugin must be configured like this: handlers : - clazz : com.orientechnologies.orient.server.handler.OJMXPlugin parameters : - name : enabled value : false - name : profilerManaged value : true This could be useful for temporary agent usage (not in production).","title":"Dynamic agent installation"},{"location":"guide/enterprise/#manual-agent-installation","text":"If you have enterprise license and want to include agent into your app distribution (instead of copying it manually on each environment): create libs folder in your project and move agent plugin into it in project add dependency for libs folder. For example, in gradle: runtime fileTree ( dir: 'libs' , include: '*.jar' ) change handlers section in config (add agent and change jmx parameters): handlers : - clazz : com.orientechnologies.agent.OEnterpriseAgent parameters : - name : license value : '@LICENSE@' - clazz : com.orientechnologies.orient.server.handler.OJMXPlugin parameters : - name : enabled value : false - name : profilerManaged value : true","title":"Manual agent installation"},{"location":"guide/plugins/","text":"Orient server plugins \u00b6 Orient has some plugins by default (mail, backup, jmx etc) and few external plugins (studio, lucene, etc). With usual orient server, external plugins are simply put into $DISTRIBUTION_HOME/plugins folder. Orient monitors this folder and install plugins. If plugin contains only static files (studio) it is registered as virtual folder in server. If plugin requires integration, it is registered as handler. So basically, manual plugin registration with handlers configuration is the same as using plugins folder (except static plugins, which may be registered only from plugins folder). With embedded server, you can use both dynamic plugins and direct configuration. Dynamic plugins \u00b6 Dynamic plugins are enabled by default, but without hot-reloading. You can use the following properties to change it: properties : - name : plugin.dynamic value : true - name : plugin.hotReload value : false plugin.hotReload may be enabled to support hot plugin installation (when plugin is copied into plugins folder during runtime) When plugin.dynamic is true, you can create plugins folder inside your files-path folder and put plugins there. It is useful for environment-specific plugins installation (e.g. install studio like plugin and not with webjar). Warning Orient will show warnings about these properties Static plugins \u00b6 Static plugins are enabled by adding (if required) plugin jar into classpath and adding new handler. For example, for lucene plugin: Important Lucene plugin is not activated like this anymore. It's just as an example: com . orientechnologies : orientdb - lucene: 2.0 . 5 And enabling in configuration handlers : - clazz : com.orientechnologies.lucene.OLuceneIndexPlugin Read more about plugins in orient docs","title":"Plugins"},{"location":"guide/plugins/#orient-server-plugins","text":"Orient has some plugins by default (mail, backup, jmx etc) and few external plugins (studio, lucene, etc). With usual orient server, external plugins are simply put into $DISTRIBUTION_HOME/plugins folder. Orient monitors this folder and install plugins. If plugin contains only static files (studio) it is registered as virtual folder in server. If plugin requires integration, it is registered as handler. So basically, manual plugin registration with handlers configuration is the same as using plugins folder (except static plugins, which may be registered only from plugins folder). With embedded server, you can use both dynamic plugins and direct configuration.","title":"Orient server plugins"},{"location":"guide/plugins/#dynamic-plugins","text":"Dynamic plugins are enabled by default, but without hot-reloading. You can use the following properties to change it: properties : - name : plugin.dynamic value : true - name : plugin.hotReload value : false plugin.hotReload may be enabled to support hot plugin installation (when plugin is copied into plugins folder during runtime) When plugin.dynamic is true, you can create plugins folder inside your files-path folder and put plugins there. It is useful for environment-specific plugins installation (e.g. install studio like plugin and not with webjar). Warning Orient will show warnings about these properties","title":"Dynamic plugins"},{"location":"guide/plugins/#static-plugins","text":"Static plugins are enabled by adding (if required) plugin jar into classpath and adding new handler. For example, for lucene plugin: Important Lucene plugin is not activated like this anymore. It's just as an example: com . orientechnologies : orientdb - lucene: 2.0 . 5 And enabling in configuration handlers : - clazz : com.orientechnologies.lucene.OLuceneIndexPlugin Read more about plugins in orient docs","title":"Static plugins"},{"location":"guide/security/","text":"Security features \u00b6 Orient provides advances security features Normally, security features could be configured with external json file , but you can also configure it directly in yaml configuration LDAP user import \u00b6 Note OLDAPImporter by default is released only with Enterprise Edition, but technically it\u2019s part of the security module, that is open-source, so you can add it to your CE distribution. source To enable LDAP users import attach com.orientechnologies:orientdb-security:3.0.26 and configure ldap importer in the security config. Other features \u00b6 I did not try it, but probably it would be possible to activate other features like auditing/syslog , karberos , password validator","title":"Security"},{"location":"guide/security/#security-features","text":"Orient provides advances security features Normally, security features could be configured with external json file , but you can also configure it directly in yaml configuration","title":"Security features"},{"location":"guide/security/#ldap-user-import","text":"Note OLDAPImporter by default is released only with Enterprise Edition, but technically it\u2019s part of the security module, that is open-source, so you can add it to your CE distribution. source To enable LDAP users import attach com.orientechnologies:orientdb-security:3.0.26 and configure ldap importer in the security config.","title":"LDAP user import"},{"location":"guide/security/#other-features","text":"I did not try it, but probably it would be possible to activate other features like auditing/syslog , karberos , password validator","title":"Other features"},{"location":"guide/ssl/","text":"SSL \u00b6 Orient configuration \u00b6 Orient ssl guide describes that: ssl could be configured for binary protocol and https for http. ssl is configured using custom socket (may be the same for both binary and http listeners) both secured and not secured listeners could co-exist Example ssl only configuration: network : sockets : - name : ssl implementation : com.orientechnologies.orient.server.network.OServerTLSSocketFactory parameters : - network.ssl.clientAuth : false - network.ssl.keyStore : 'path/to/example.keystore' - network.ssl.keyStorePassword : example - network.ssl.trustStore : 'path/to/example.keystore' - network.ssl.trustStorePassword : example protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2434-2440 socket : ssl - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : ssl ... Note that socket parameter of listeners set to ssl instead of default . Mixed configuration: network : sockets : - name : ssl implementation : com.orientechnologies.orient.server.network.OServerTLSSocketFactory parameters : - network.ssl.keyStore : 'path/to/example.keystore' - network.ssl.keyStorePassword : example protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2424-2430 socket : default - protocol : binary ipAddress : 0.0.0.0 portRange : 2434-2440 socket : ssl - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : http ... Two listeners registered for binary protocol: not secured (2424) and secured (2434). Two versions of http listeners could also be registered. Note that default port ranges for binary ssl are 2434-2440. This is important as orient tries to connect to 2434 by default, when ssl is enabled on client (when port is not declared in address: remote:localhost/somedb ). Different ports could be used, but it will force remote clients to always specify port ( remote:localhost:2455/somedb ). Certificate paths \u00b6 By default, orient will try to locate socket certificates relative to files-path (ORIENTDB_HOME) directory, which might be not handful. To allow defining certificates relative to application startup dir, bundle will check registered ssl bundles and if configured keystorage files exist relatively to app dir, then it will change relative paths to absolute file paths. For example, sockets : - name : ssl implementation : com.orientechnologies.orient.server.network.OServerTLSSocketFactory parameters : - network.ssl.clientAuth : false - network.ssl.keyStore : 'conf/certs/example.keystore' ... If file /app/run/dir/conf/certs/example.keystore exists then this absolute path will be set into orient config (instead of relative). If file not found, then orient will try to resolve file against files-path directory. /orient info servlet \u00b6 Orient info servlet shows all configured ports and highlights secured ports: * Binary ports: 2424, 2434 (ssl) * Http ports: 2480, 2491 (ssl) Studio url \u00b6 If multiple http listeners defined, bundle will install studio only in one of them: Prefer https listener If no secure listener found, use the first http listener /orient/studio alias will lead to https studio version (assuming https listener registered). Dropwizard admin context ssl configuration is not counted (can't be), so alias will always properly redirect to the studio. For example, if admin context use https and orient is using http, then https://localhost:8444/orient/studio will redirect to http url like http://localhost:2480/studio ` (opposite case is also possible). Auto SSL configuration \u00b6 The special EXPERIMENTAL option provided to automate orient ssl configuration based on dropwizard main context configuration. For example, dropwizard main connector is configured to use https : server : applicationConnectors : - type : https port : 8443 keyStorePath : path/to/example.keystore keyStorePassword : example validateCerts : false validatePeers : false And auto-ssl option is enabled (and no ssl manually configured for orient): orient-server : files-path : $TMP/db/ auto-ssl : true config : ... network : protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2424-2430 socket : default - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : default Then on startup new ssl socket will be added to the configuration (with the same keystore and truststore as in dropwizard) and both listeneres will be switched to use it. So you would see in /orient page: * Binary ports: 2434 (ssl) * Http ports: 2480 (ssl) Important It changed(!) default 2424-2430 port range for binary protocol to 2434-2440 because it is orient defaults for ssl (and remote connection from client will assume 2434 port by default). BUT, if port range will be different (even if it would be different only by 1: 2424-2429) then ports will not(!) be switched. Also, auto-ssl mode automatically configures orient client to use ssl : OGlobalConfiguration.CLIENT_USE_SSL.setValue(true); . It is done ONLY when auto-ssl enabled because only in this case bundle could be sure that client must use secured connection (and for sure client will call embedded server). This allows you to always use remote connection in the simplest way: remote:localhost/somedb (because port is corrected to ssl default automatically and client ssl mode also enabled). Convinient for tests. Auto ssl option may be useful for dev environments to check something quickly. The option was not intended to be used for production due to its limitations: Will not configure orient ssl: if at least one listener already use ssl if dropwizard https connector specifies keystore providers (orient does not support providers configuration) All configured listeners are changed to use ssl, so it is impossible to specify additional not secured listener when auto ssl enabled Default ports change for bianray protocol and orient client ssl enabling could be confusing","title":"SSL"},{"location":"guide/ssl/#ssl","text":"","title":"SSL"},{"location":"guide/ssl/#orient-configuration","text":"Orient ssl guide describes that: ssl could be configured for binary protocol and https for http. ssl is configured using custom socket (may be the same for both binary and http listeners) both secured and not secured listeners could co-exist Example ssl only configuration: network : sockets : - name : ssl implementation : com.orientechnologies.orient.server.network.OServerTLSSocketFactory parameters : - network.ssl.clientAuth : false - network.ssl.keyStore : 'path/to/example.keystore' - network.ssl.keyStorePassword : example - network.ssl.trustStore : 'path/to/example.keystore' - network.ssl.trustStorePassword : example protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2434-2440 socket : ssl - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : ssl ... Note that socket parameter of listeners set to ssl instead of default . Mixed configuration: network : sockets : - name : ssl implementation : com.orientechnologies.orient.server.network.OServerTLSSocketFactory parameters : - network.ssl.keyStore : 'path/to/example.keystore' - network.ssl.keyStorePassword : example protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2424-2430 socket : default - protocol : binary ipAddress : 0.0.0.0 portRange : 2434-2440 socket : ssl - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : http ... Two listeners registered for binary protocol: not secured (2424) and secured (2434). Two versions of http listeners could also be registered. Note that default port ranges for binary ssl are 2434-2440. This is important as orient tries to connect to 2434 by default, when ssl is enabled on client (when port is not declared in address: remote:localhost/somedb ). Different ports could be used, but it will force remote clients to always specify port ( remote:localhost:2455/somedb ).","title":"Orient configuration"},{"location":"guide/ssl/#certificate-paths","text":"By default, orient will try to locate socket certificates relative to files-path (ORIENTDB_HOME) directory, which might be not handful. To allow defining certificates relative to application startup dir, bundle will check registered ssl bundles and if configured keystorage files exist relatively to app dir, then it will change relative paths to absolute file paths. For example, sockets : - name : ssl implementation : com.orientechnologies.orient.server.network.OServerTLSSocketFactory parameters : - network.ssl.clientAuth : false - network.ssl.keyStore : 'conf/certs/example.keystore' ... If file /app/run/dir/conf/certs/example.keystore exists then this absolute path will be set into orient config (instead of relative). If file not found, then orient will try to resolve file against files-path directory.","title":"Certificate paths"},{"location":"guide/ssl/#orient-info-servlet","text":"Orient info servlet shows all configured ports and highlights secured ports: * Binary ports: 2424, 2434 (ssl) * Http ports: 2480, 2491 (ssl)","title":"/orient info servlet"},{"location":"guide/ssl/#studio-url","text":"If multiple http listeners defined, bundle will install studio only in one of them: Prefer https listener If no secure listener found, use the first http listener /orient/studio alias will lead to https studio version (assuming https listener registered). Dropwizard admin context ssl configuration is not counted (can't be), so alias will always properly redirect to the studio. For example, if admin context use https and orient is using http, then https://localhost:8444/orient/studio will redirect to http url like http://localhost:2480/studio ` (opposite case is also possible).","title":"Studio url"},{"location":"guide/ssl/#auto-ssl-configuration","text":"The special EXPERIMENTAL option provided to automate orient ssl configuration based on dropwizard main context configuration. For example, dropwizard main connector is configured to use https : server : applicationConnectors : - type : https port : 8443 keyStorePath : path/to/example.keystore keyStorePassword : example validateCerts : false validatePeers : false And auto-ssl option is enabled (and no ssl manually configured for orient): orient-server : files-path : $TMP/db/ auto-ssl : true config : ... network : protocols : - binary : com.orientechnologies.orient.server.network.protocol.binary.ONetworkProtocolBinary - http : com.orientechnologies.orient.server.network.protocol.http.ONetworkProtocolHttpDb listeners : - protocol : binary ipAddress : 0.0.0.0 portRange : 2424-2430 socket : default - protocol : http ipAddress : 0.0.0.0 portRange : 2480-2490 socket : default Then on startup new ssl socket will be added to the configuration (with the same keystore and truststore as in dropwizard) and both listeneres will be switched to use it. So you would see in /orient page: * Binary ports: 2434 (ssl) * Http ports: 2480 (ssl) Important It changed(!) default 2424-2430 port range for binary protocol to 2434-2440 because it is orient defaults for ssl (and remote connection from client will assume 2434 port by default). BUT, if port range will be different (even if it would be different only by 1: 2424-2429) then ports will not(!) be switched. Also, auto-ssl mode automatically configures orient client to use ssl : OGlobalConfiguration.CLIENT_USE_SSL.setValue(true); . It is done ONLY when auto-ssl enabled because only in this case bundle could be sure that client must use secured connection (and for sure client will call embedded server). This allows you to always use remote connection in the simplest way: remote:localhost/somedb (because port is corrected to ssl default automatically and client ssl mode also enabled). Convinient for tests. Auto ssl option may be useful for dev environments to check something quickly. The option was not intended to be used for production due to its limitations: Will not configure orient ssl: if at least one listener already use ssl if dropwizard https connector specifies keystore providers (orient does not support providers configuration) All configured listeners are changed to use ssl, so it is impossible to specify additional not secured listener when auto ssl enabled Default ports change for bianray protocol and orient client ssl enabling could be confusing","title":"Auto SSL configuration"},{"location":"guide/studio/","text":"Orient studio \u00b6 Orient studio is irreplaceable tool for both learning and development. You will need it to validate schema, do manual schema changes and migrations, debug sql queries (all the things you usually do in external applications like SqlDeveloper for relational databases). Studio could be embedded using official orient jar (by default, it is not included). Add dependency: compile 'com.orientechnologies:orientdb-studio:3.0.26' After jetty server start (usual dropwizard startup): $ [ .. ] server config.yml Studio will be available on url: http://localhost:2480/studio/ . Port number depends on orient configuration. You can use universal url in admin servlet: http://localhost:8081/orient/studio/ , which will redirect to actual studio location. Note Studio will not start if static content listener is not defined in configuration (defined in example configuration) commands : - pattern : 'GET|www GET|studio/ GET| GET|*.htm GET|*.html GET|*.xml GET|*.jpeg GET|*.jpg GET|*.png GET|*.gif GET|*.js GET|*.css GET|*.swf GET|*.ico GET|*.txt GET|*.otf GET|*.pjs GET|*.svg' implementation : 'com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetStaticContent' parameters : - http.cache:*.htm *.html : 'Cache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\nPragma: no-cache' - http.cache:default : 'Cache-Control: max-age=120' Studio github repository .","title":"Studio"},{"location":"guide/studio/#orient-studio","text":"Orient studio is irreplaceable tool for both learning and development. You will need it to validate schema, do manual schema changes and migrations, debug sql queries (all the things you usually do in external applications like SqlDeveloper for relational databases). Studio could be embedded using official orient jar (by default, it is not included). Add dependency: compile 'com.orientechnologies:orientdb-studio:3.0.26' After jetty server start (usual dropwizard startup): $ [ .. ] server config.yml Studio will be available on url: http://localhost:2480/studio/ . Port number depends on orient configuration. You can use universal url in admin servlet: http://localhost:8081/orient/studio/ , which will redirect to actual studio location. Note Studio will not start if static content listener is not defined in configuration (defined in example configuration) commands : - pattern : 'GET|www GET|studio/ GET| GET|*.htm GET|*.html GET|*.xml GET|*.jpeg GET|*.jpg GET|*.png GET|*.gif GET|*.js GET|*.css GET|*.swf GET|*.ico GET|*.txt GET|*.otf GET|*.pjs GET|*.svg' implementation : 'com.orientechnologies.orient.server.network.protocol.http.command.get.OServerCommandGetStaticContent' parameters : - http.cache:*.htm *.html : 'Cache-Control: no-cache, no-store, max-age=0, must-revalidate\\r\\nPragma: no-cache' - http.cache:default : 'Cache-Control: max-age=120' Studio github repository .","title":"Orient studio"}]}